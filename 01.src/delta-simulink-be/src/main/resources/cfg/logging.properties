###############################################################################
# Delta-Simulink
# Copyright (c) 2013, RIDT, All rights reserved.
#
# This project is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 3.0 of the License, or (at your option) any later version.
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this project.
###############################################################################
############################################################
#  	Default Logging Configuration File
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.  
# For example java -Dmc.loggingfile=myfile
############################################################

# To enable logging enable one or more handlers
#  and set level to more than off


############################################################
#  	Global properties
############################################################

# "handlers" specifies a comma separated list of log Handler 
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
#handlers= java.util.logging.ConsoleHandler

# To also add the FileHandler, use the following line instead.
# handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler

# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
# OFF (=turn logging off) SEVERE (höchste Dringlichkeit),
# WARNING, INFO, CONFIG, FINE, FINER, FINEST (=all logging messages)
# .level= OFF
.level= WARNING

# Restrict logging to a certain category
# mc.logging.restrictions = part

############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################

# default file output is in user's home directory.
# For explaination of pattern see Javadoc of 
# java.util.logging.FileHandler or below 
java.util.logging.FileHandler.pattern = java%u.log
java.util.logging.FileHandler.limit = 50000
java.util.logging.FileHandler.count = 1
java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter

# Limit the message that are printed on the console to XXX and above.
java.util.logging.ConsoleHandler.level = WARNING
java.util.logging.ConsoleHandler.formatter = mc.logging.EvenSimplerFormatter

# A pattern consists of a string that includes the following special
# components that will be replaced at runtime:
#   * "/" the local pathname separator
#   * "%t" the system temporary directory
#   * "%h" the value of the "user.home" system property
#   * "%g" the generation number to distinguish rotated logs
#   * "%u" a unique number to resolve conflicts
#   * "%%" translates to a single percent sign "%" 

# If no "%g" field has been specified and the file count is greater than
# one, then the generation number will be added to the end of the generated
# filename, after a dot.

# Thus for example a pattern of "%t/java%g.log" with a count of 2 would
# typically cause log files to be written on Solaris to /var/tmp/java0.log
# and /var/tmp/java1.log whereas on Windows 95 they would be typically
# written to to C:\TEMP\java0.log and C:\TEMP\java1.log

# Generation numbers follow the sequence 0, 1, 2, etc.

# Normally the "%u" unique field is set to 0. However, if the FileHandler
# tries to open the filename and finds the file is currently in use by
# another process it will increment the unique number field and try again.
# This will be repeated until FileHandler finds a file name that is not
# currently in use. If there is a conflict and no "%u" field has been specified,
# it will be added at the end of the filename after a dot.
# (This will be after any automatically added generation number.)

# Thus if three processes were all trying to log to fred%u.%g.txt
# then they might end up using fred0.0.txt, fred1.0.txt, fred2.0.txt
# as the first file in their rotating sequences. 

